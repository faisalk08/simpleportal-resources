/*
 * Automatically generated by SP Control panel
 * CRUD service.js for including the various packages required.
 */

var simpleportal = require("simpleportal");

var projectService = new simpleportal.Service.CRUDService({
	"collection":"Project", 
	"name":"project", modify:true
	,"title":"Project"
	
	
	,"primaryKeyFields":"title"
	
	,model:{"title":"", startdate:"", enddate:""
	},"validation":{
		"title":"required",
	}, dataformat:{
		startdate:function(date, object){
			if(date)
				return new Date(date)
			else
				return null;
		},enddate:function(date, object){
			if(date)
				return new Date(date)
			else
				return null;
		}
	}, configuration:{
		"modelsettings":{
			"startdate":{fieldplugin:"datepicker"},
			"enddate":{fieldplugin:"datepicker"}
		}
	}
});

[
{
	"$group":{
		"_id":{
			"project":"$project", "role":"$resourcerole"
		}, "count":{
			"$sum":{"$multiply":["$timeinhours", 30]}
		}
	}
},

]

function calculateEndDate(projectitem, startdate){
	if(typeof startdate === 'object')
		startdate = startdate;//Date.parse(startdate);
	else if(typeof startdate === 'string')
		startdate = Date.parse(startdate);
	
	var enddate =  new Date(startdate);
	
	var timeindays = projectitem.timeindays = Math.floor(Number(projectitem.timeinhours)/8);
	var timeinweeks = Math.round(timeindays/5);
	var extradays = ((((timeindays%5)*8)+(projectitem.timeinhours%8)))%(8);
		timeinweeks += Math.round(extradays/5);
		extradays = extradays%5;

	enddate = simpleportal.util.addWeeks(enddate, timeinweeks);
	if(extradays>0){
		enddate = simpleportal.util.addDays(enddate, extradays);
	}
	
	projectitem.startdate = startdate;
	projectitem.enddate = enddate;
	
//	console.log("Calculated the end date from  -- " + startdate + ' --- '+ enddate + " total weeks ="+ timeinweeks + ' + days='+extradays)
	
	return projectitem;
}

function calculateItemSchedule(error, project, items, callback){
	var previtem;
	project.schedules=[];
	for(var i in items){
		var projectitem = items[i];
		if(projectitem.startdate)
			calculateEndDate(projectitem, projectitem.startdate);
		else if(previtem){
			if(previtem.priority == projectitem.priority)
				calculateEndDate(projectitem, previtem.startdate);
			else
				calculateEndDate(projectitem, previtem.enddate);
		}else
			calculateEndDate(projectitem, project.startdate);
		
		project.schedules.push({title:projectitem.itemtitle, start:projectitem.startdate, end:projectitem.enddate});
		
		previtem = projectitem;
	}
	
	callback(error, project);
}

projectService.get("/:id/schedule", function(request, response, callback){
	projectService.details(request.pathGroup, function(error, project){
//		console.log(project);
		
		if(project)
			simpleportal.serviceloader.projectitem.search({project:project.id}, function(error, items){
//				console.log(items);
				
//				project.items=items;
				
				calculateItemSchedule(error, project, items.results, callback);
			}, {sort:[['project', 1], ['priority', 1],['itemtitle', 1]]});
		else
			callback(error);
	})
});

projectService.get("/:id/cost", function(request, response, callback){
	var pipelinequery = {};
	pipelinequery.pipeline = [];
	
	var xfield = request.query.x||"project"; 
	var yfield = request.query.y||"resourcerole"; 
	
	var includetotal = request.query.includetotal;
	var costinhours = request.query.costinhours;
	var defaultcost = 30;
	
	// filter for the project
	pipelinequery.pipeline.push({$match:{project:request.pathGroup}});
	
	if(!request.query.x){
		xfield = "itemcategory";
		
		if(costinhours&&costinhours>0)
			pipelinequery.pipeline.push({"$group":{"_id":{"x":"$"+xfield}, "count":{"$sum":{"$multiply":["$timeinhours", Number(costinhours)]}}}});
		else 
			pipelinequery.pipeline.push({"$group":{"_id":{"x":"$"+xfield}, "count":{"$sum":{"$multiply":["$timeinhours", {"$ifNull":["$costinhours", defaultcost]}]}}}});
			
		var projectquery = {"_id":"$_id.x", "count":"$count"};
		projectquery[xfield]="$_id.x";
		
		pipelinequery.pipeline.push({"$project":projectquery});
	} else{
		if(costinhours&&costinhours>0)
			pipelinequery.pipeline.push({"$group":{"_id":{"x":"$"+xfield, "y":{"$ifNull":["$"+yfield, "Not defined"]}}, "count":{"$sum":{"$multiply":["$timeinhours", Number(costinhours)]}}/*, "totalcount":{"$push":{"count":"$count"}}*/}});
		else
			pipelinequery.pipeline.push({"$group":{"_id":{"x":"$"+xfield, "y":{"$ifNull":["$"+yfield, "Not defined"]}}, "count":{"$sum":{"$multiply":["$timeinhours", {"$ifNull":["$costinhours", defaultcost]}]}}/*, "totalcount":{"$push":{"count":"$count"}}*/}});
		
		var projectquery = {"_id":{"$concat":["$_id.x", " - ", "$_id.y"]}, "count":"$count"};
		projectquery[yfield]="$_id.y";
		pipelinequery.pipeline.push({"$project":projectquery});
	}
	
	//pipelinequery.pipeline.push({"$group":{"_id":null, "totalcount":{"$sum":"$count"}} });
	
	var dependantprojectitems = [];
	
	dependantprojectitems.push({"title":"Testing", "costinpercentage":15});
	dependantprojectitems.push({"title":"Documentation", "costinpercentage":10});
	dependantprojectitems.push({"title":"Contract/Compliance/Ceritification", "costinpercentage":20});
	dependantprojectitems.push({"title":"License and Commercial support", "costinpercentage":20});
	
	simpleportal.serviceloader.projectitem.getStorageService().aggregate(pipelinequery, function(error, data){
		if(includetotal && data){
			var totalcost = 0;
			var developmentcost = 0;
			for(var ind in data){
				var cdata = data[ind];
				
				if(cdata&&cdata.count)
					totalcost+=cdata.count;
				
				if(cdata&&cdata[yfield]=="development"){
					developmentcost=cdata.count;
				}
			}
			
			if(xfield == "itemcategory" && developmentcost){
				//data.push({_id:'Development cost', count:developmentcost});
				
//				var total = developmentcost;
				//now append the dependent calculation
				for(var i in dependantprojectitems){
					var depitem = dependantprojectitems[i];
					if(depitem.costinpercentage){
						depitem.count = ((Number(developmentcost)*Number(depitem.costinpercentage))/100);
						depitem._id = depitem.title + '(' +depitem.costinpercentage + '% of development cost="'+developmentcost+'")';
						
						data.push(depitem);
						totalcost+=depitem.count;
						
						depitem.itemcategory="prerelease";
					}
				}
				data.push({_id:'Final cost', count:totalcost});
			}else
				data.push({_id:'Total', count:totalcost});
		}
		
		callback(error, {count:data});
	});
});

/*
 * Exporting the Sponsor service.
 */
module.exports = projectService;